import React, {useCallback, useRef, useState, useEffect} from 'react';
import {View,Text,LayoutAnimation,NativeModules, Dimensions,KeyboardAvoidingView,Platform,StyleSheet,ScrollView,StatusBar,Animated,Easing,Keyboard, UIManager} from 'react-native';
import * as Animatable from 'react-native-animatable';
import LinearGradient from 'react-native-linear-gradient';
import {EmailInput, SenhaInput, PrivacyPolicy, OuLine, HeaderLogin,ButtonLoginEmail} from '../../components/signInComponents/SignInput';
import {ButtonOpacity} from '../../components/basicComponents/BasicComponents';
import useModalAnimated from '../../components/modalComponents/AnimatedModal'
import useReactModal from '../../components/modalComponents/ReactModal';
import {infoNet,GoogleSign,SignInEmail,LogOut,RedefinirSenha} from '../../services/FirebaseAuth';
import useDispatchActions from'../../hooks/useDispatchActions';
import LogoSVG from '../../../assets/logoSVG.svg' ;

const SignInScreen = ({navigation}) => {

    const refFocus = useRef(false)
    const [modalVisible, setModalVisible] = useState(false);
    const [data, setData] = useState({
        username: '',
        password: '',
        check_textInputChange: false,
        secureTextEntry: true,
        isValidUser: true,
        isValidPassword: false,
        focus:'none'
    });
    const [ModalAnimatedComponent, onAnimationModal] = useModalAnimated(70);
    const [callBack, setCallBack] = useState(0);
    const [MainModal,onModalVisible] = React.useCallback(useReactModal(setCallBack),[callBack]);
    const [dispatchUserGoogle] = useDispatchActions(onModalVisible)
    const [expanded, setExpanded] = useState(false);
    //const [keyboard, setKeyboard] = useState(false);
    if (
        Platform.OS === "android" &&
        UIManager.setLayoutAnimationEnabledExperimental
      ) {
        UIManager.setLayoutAnimationEnabledExperimental(true);
      }
    

/*     const animatedImage = useRef(new Animated.Value(1)).current; 
    function onAnimatedImage(toValue) {
        Animated.timing(animatedImage, {
            toValue,
            duration: 500,
            useNativeDriver: false,
        }).start();
    } */

    function onAnimatedInput() {
        LayoutAnimation.configureNext(
            LayoutAnimation.create(
                500,
                LayoutAnimation.Types.easeInEaseOut,
                LayoutAnimation.Properties.opacity
              )        
        );
        setExpanded(!expanded);
    }
  /*   function onAnimatedInput() {
            Animated.sequence([
                Animated.timing(animatedInput, {
                    delay: 0,
                    toValue:100,
                    duration:1000,
                    useNativeDriver: true,
                    easing: Easing.out(Easing.ease),
                }),
            ]).start();   
    } */

/*     useEffect(() => {
        Keyboard.addListener("keyboardDidShow", _keyboardDidShow);
        Keyboard.addListener("keyboardDidHide", _keyboardDidHide);
    
        // cleanup function
        return () => {
          Keyboard.removeListener("keyboardDidShow", _keyboardDidShow);
          Keyboard.removeListener("keyboardDidHide", _keyboardDidHide);
        };
      }, []);
    
      const _keyboardDidShow = () => {
        onAnimatedImage(0)
      };
    
      const _keyboardDidHide = () => {
        onAnimatedImage(1)
      }; */
    
    
    //////////referente ao INPUT de EMAIL    
    //Aqui verifica se email é valido, se for poe o ICON CHECK TRUE e se não for, coloca ICON CHECK FALSE -- aqui nao faz nada se vc sair do input (OUTRO FUNÇÃO)
    const textInputChange = (val) => {
        let re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        if ( re.test(val.trim()) ) { //   if( val.trim().length >= 4 ) {
            setData({
                ...data,
                username: val.trim(),
                check_textInputChange: true,
                isValidUser: true
            });
        } else {
            setData({
                ...data,
                username: val.trim(),
                check_textInputChange: false,
                /*                 isValidUser: false */
            });
        }
    }
    
    // Aqui ao sair do input ele verifica se ta certo e avisa se estiver errado
    const handleValidUser = (val) => {
    
        let re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        
        if ( re.test(val.trim()) ) { //if( val.trim().length >= 4 ) {
            setData({
                ...data,
                isValidUser: true
            });
        }
        else if (val.trim().length != 0) {
            setData({
                ...data,
                isValidUser: false
            });
        }
    }

    ///////// Localizar FOCO INPUT
    const onFocus = (local) => {
        setData({
            ...data,
            focus: local
        });
    }

    const onSetModalVisible = React.useCallback((activation) => {
        if (!activation) {
            setModalVisible(false)
        } else if (activation) {
            setTimeout(() => {
                setModalVisible(true)
            }, 1500);
        } else{
            setModalVisible(!modalVisible)
        }
    },[modalVisible])

    ///////Funcao FIREBASE
    //Fazer LOGIN e se der erro informar por MODAL
    const onRedefinirSenha = useCallback((onAnimationModal,t1,t2,t3,valid,onClose) => {
        infoNet(
            ()=>RedefinirSenha(t1,onAnimationModal,onSetModalVisible,onModalVisible,onClose),
            ()=>onModalVisible(true,'info','Você não está conectado à internet. Por favor, tente novamente mais tarde.','Erro no Login',0)
        )
    },[])

    ///////Funcao FIREBASE para verificar email
    const onCheckEmail = () => {
        infoNet(
            ()=>{},
            ()=>onModalVisible(true,'info','Você não está conectado à internet. Por favor, tente novamente mais tarde.','Erro no Login',0)
        )
    }
    
    const onGoogleLogin = () => {
        infoNet(
            ()=>GoogleSign(onModalVisible,dispatchUserGoogle),
            ()=>onModalVisible(true,'info','Você não está conectado à internet. Por favor, tente novamente mais tarde.','Erro no Login',0)
        )
    }
   
    return (
        <View style={styles.container} >
                {console.log(2)}
        <StatusBar backgroundColor='#262626' barStyle="light-content"/>
            <Animated.View style={{flex:1,justifyContent:"center",alignItems:"center",opacity:1,transform:[{translateY:0}]}}>
            </Animated.View>
            <Animatable.View style={{...styles.footer}} animation="fadeInUpBig">
            <Animatable.Image animation="bounceIn" duraton="1500" source={require('../../../assets/logo.png')} style={{height:270,width:270,resizeMode:`contain`, marginTop:0, position:"absolute", top:-390,left:75,zIndex:0}}/>
            <ScrollView showsVerticalScrollIndicator={false} bounces={false} keyboardShouldPersistTaps='handled' >
                <View style={{paddingHorizontal:25,paddingTop:10,paddingBottom:5}}>
                <Text style={{color: 'grey',fontSize: 15,flex:1,textAlign:"center",marginBottom:2,marginTop:5,fontSize:14}}>Faça login ou cadastre-se</Text>
                    <EmailInput
                        OnSubmitKeyboardPress={()=>refFocus.current.focus()}
                        onFocusInput={()=>onFocus('username')}
                        onTextChange={textInputChange}
                        onEndText={handleValidUser}
                        data={data}/>
                    {expanded && (
                        <View style={{backgroundColor:'#fff',elevation:0,zIndex:0}}>
                    <SenhaInput
                        refFocus={refFocus}
                        data={data}/>
                    {expanded === 'cadastro' && (
                    <SenhaInput
                        refFocus={refFocus}
                        confirme={false}
                        data={data}/>
                    )}
                        </View>
                    )}
                   <View style={{backgroundColor:'#fff',zIndex:1}}>
                        <ButtonOpacity
                            onFunction={onAnimatedInput}
                            scale={0.8}
                            height={60}
                            text='CONTINUAR'/>
                            {expanded && (
                            <Text onPress={()=>setModalVisible(true)} style={{color:'grey',fontSize:14,width:`100%`,textAlign:"center",marginVertical:10}} >Esqueceu sua senha?</Text>
                            )}
                            <OuLine
                            backgroundColor='#fff'
                            color='#99999955'
                            />
                        <ButtonOpacity
                            onFunction={onGoogleLogin}
                            imageSource={require('../../../assets/google-hangouts.png')}
                            imagePosition='center'
                            scale={0.8}
                            height={60}
                            //style={{transform:[{scale:0.7}]}}
                            text='Continue com Google'/>

                        <PrivacyPolicy
                            onPress={()=>{}}
                            onPressPolicy={()=>{}}
                            colorTextDecoration='#a9a9a9'
                            color='#a9a9a9'/>
                    </View>
                </View>
            </ScrollView>
            </Animatable.View>   
        <ModalAnimatedComponent/>
        <MainModal/>
        </View>
    );
};

export default SignInScreen;



const styles = StyleSheet.create({
    container: {
      flex: 1, 
      backgroundColor: '#eee',
    },
    footer: {
        marginTop:20,
        backgroundColor: '#fff',
        borderTopLeftRadius: 30,
        borderTopRightRadius: 30,
    },
  });