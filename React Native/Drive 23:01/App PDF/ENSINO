TUTORIAL
(https://aboutreact.com/make-pdf-in-react-native-from-html-text/)
(https://aboutreact.com/react-native-print-html/)

npm install react-native-html-to-pdf --save  (https://github.com/christopherdro/react-native-html-to-pdf) tem manual link if want to try
npm install react-native-pdf rn-fetch-blob @react-native-community/progress-bar-android @react-native-community/progress-view --save {https://www.npmjs.com/package/react-native-pdf}
npm i react-native-share --save. (https://react-native-share.github.io/react-native-share/docs/share-open)
npm install react-native-print --save (https://github.com/christopherdro/react-native-print)

foi baixada la em cima (https://github.com/joltup/rn-fetch-blob) ..> https://stackoverflow.com/questions/44546199/how-to-download-a-file-with-react-native
                                                                      https://stackoverflow.com/questions/64010990/how-convert-base64-to-pdf-react-native
cd ios && pod install && cd ..


///////AndroidMnifest.xml ->
    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.DOWNLOAD_WITHOUT_NOTIFICATION" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

        <intent-filter>
            <action android:name="android.intent.action.MAIN" />
            <category android:name="android.intent.category.LAUNCHER" />
            <action android:name="android.intent.action.DOWNLOAD_COMPLETE"/>
        </intent-filter>

  android:requestLegacyExternalStorage="true" in your `<application>` in `AndroidManifest.xml` (https://stackoverflow.com/questions/63780467/react-native-error-rnhtmltopdf-error-could-not-create-folder-structure)

//////android -> app -> build.gradle
defaultConfig {
  .....
 multiDexEnabled true
}
..............
dependencies {
 .......
 implementation 'com.android.support:multidex:1.0.3'
}


android {
 
+    packagingOptions {
+       pickFirst 'lib/x86/libc++_shared.so'
+       pickFirst 'lib/x86_64/libjsc.so'
+       pickFirst 'lib/arm64-v8a/libjsc.so'
+       pickFirst 'lib/arm64-v8a/libc++_shared.so'
+       pickFirst 'lib/x86_64/libc++_shared.so'
+       pickFirst 'lib/armeabi-v7a/libc++_shared.so'
+     }
 
   }


---->Permisions
  import {PermissionsAndroid,Platform,} from 'react-native';

  const isPermitted = async () => {
    if (Platform.OS === 'android') {
      try {
        const granted = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,
          {
            title: 'External Storage Write Permission',
            message: 'App needs access to Storage data',
          },
        );
        return granted === PermissionsAndroid.RESULTS.GRANTED;
      } catch (err) {
        alert('Write permission err', err);
        return false;
      }
    } else {
      return true;
    }
  };

---->Create PDF FILE 
    const createPDF = async () => {
    if (await isPermitted()) {
      let options = {
        //Content to print
        html:
          '<h1 style="text-align: center;"><strong>Hello Guys</strong></h1><p style="text-align: center;">Here is an example of pdf Print in React Native</p><p style="text-align: center;"><strong>Team About React</strong></p>',
        //File Name
        fileName: 'test',
        //File directory
        directory: 'docs',
      };
      let file = await RNHTMLtoPDF.convert(options);
      console.log(file.filePath);
      setFilePath(file.filePath);
    }
  };

----->SHARE ()https://react-native-share.github.io/react-native-share/docs/share-open

  // Print HTML as a Document from React Native App for Android and iOS
  // https://aboutreact.com/react-native-print-html/

  // Import React
  import React, {useState} from 'react';
  // Import required components

  import {
    SafeAreaView,
    StyleSheet,
    Platform,
    Text,
    View,
    TouchableOpacity,
  } from 'react-native';
  import Share from 'react-native-share';
  const App = () => {

    const url = 'file:///storage/emulated/0/docs/test.pdf';
    const title = 'Awesome Contents';
    const message = 'Please check this out.';
    const options = Platform.select({
      default: {
        title,
        subject: title,
        message: `${message} ${url}`,
        url: 'file:///storage/emulated/0/docs/test.pdf'
      },
    });
    
    Share.open(options);

    return (
      <SafeAreaView style={{flex: 1}}>
        <Text style={styles.titleText}>
          Print HTML as a Document from React Native App
        </Text>
        <View style={styles.container}>
          <TouchableOpacity
            style={styles.buttonStyle}
            onPress={printHTML}>
            <Text>Click to Print HTML</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={styles.buttonStyle}
            onPress={printPDF}>
            <Text>Click to Print PDF</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={styles.buttonStyle}
            onPress={printRemotePDF}>
            <Text>Click to Print Remote PDF</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  };

  export default App;

  const styles = StyleSheet.create({
    container: {
      flex: 1,
      padding: 10,
      backgroundColor: '#fff',
      alignItems: 'center',
    },
    titleText: {
      fontSize: 22,
      fontWeight: 'bold',
      textAlign: 'center',
      paddingVertical: 20,
    },
    buttonStyle: {
      alignItems: 'center',
      backgroundColor: '#DDDDDD',
      padding: 10,
      width: 300,
      marginVertical: 10,
    },
  });


--->pode ser algo
  let fPath = Platform.select({
    ios: fs.dirs.DocumentDir,
    android: fs.dirs.DownloadDir,
  });
----->fBlod add pdf
  import React, {useState} from 'react';
  import {SafeAreaView,StyleSheet,Platform,Dimensions,Text,View,TouchableOpacity,} from 'react-native';
  import RNHTMLtoPDF from 'react-native-html-to-pdf';
  import RNPrint from 'react-native-print';
  import RNFetchBlob from 'rn-fetch-blob'
  import Pdf from 'react-native-pdf';


  const App = () => {

    //localizacao dos diretorios
    const [path, setpath] = useState()
    const [pdf, setpdf] = useState(false)

    console.log(RNFetchBlob.fs.dirs)    
    const pdfDownload = async () => {
      /* RNFetchBlob.config({
        // response data will be saved to this path if it has access right.
        path : RNFetchBlob.fs.dirs.DownloadDir + '/nomeDoArquivo.pdf'
      })
      //exemplo de pdf online
      .fetch('GET', 'http://samples.leanpub.com/thereactnativebook-sample.pdf', {
        //some headers ..
      })
      .then((res) => {
        //me da localizacao do path
        console.log('The file saved to ', res.path())
        setpath(res)
      }) */
      RNFetchBlob
      .config({
          addAndroidDownloads : {
              useDownloadManager : true, // <-- this is the only thing required
              path : RNFetchBlob.fs.dirs.DownloadDir + '/nomeDoArquivo.pdf',
              notification : true,
              title : 'nomeDoArquivo.pdf',
              description : 'An APK that will be installed',
              // Optional, override notification setting (default to true)
              // Optional, but recommended since android DownloadManager will fail when
              // the url does not contains a file extension, by default the mime type will be text/plain
              description : 'File downloaded by download manager.'
          }
      })
      .fetch('GET', 'http://samples.leanpub.com/thereactnativebook-sample.pdf')
      .then((resp) => {
        // the path of downloaded file
        console.log(resp.path())
      })
    };

    const source = {uri:'http://samples.leanpub.com/thereactnativebook-sample.pdf',cache:false}
    //const source = {uri:'file:///storage/emulated/0/docs/test.pdf'};
    const printPDF = () => {
      setpdf(!pdf)
    };

    const printRemotePDF = async () => {
      const results = await RNPrint.print({
        filePath: 'file:///data/user/0/com.appbase/files/RNFetchBlobTmp_5o8um60508e71pdegpn1e5.pdf',
      });
      console.log(results)
    };


    return (
      <SafeAreaView style={{flex: 1}}>
        {pdf ? 
        <View style={styles.containerPDF}>
            <Pdf
                source={source}
                onLoadComplete={(numberOfPages,filePath)=>{
                    console.log(`number of pages: ${numberOfPages}`);
                }}
                onPageChanged={(page,numberOfPages)=>{
                    console.log(`current page: ${page}`);
                }}
                onError={(error)=>{
                    console.log(error);
                }}
                onPressLink={(uri)=>{
                    console.log(`Link presse: ${uri}`)
                }}
                style={styles.pdf}/>
          <TouchableOpacity
            style={styles.buttonStyle}
            onPress={printPDF}>
            <Text>Download PDF da net</Text>
          </TouchableOpacity>
        </View>
        :
        <>
        <Text style={styles.titleText}>
          Print HTML as a Document from React Native App
        </Text>
        <View style={styles.container}>
          <TouchableOpacity
            style={styles.buttonStyle}
            onPress={pdfDownload}>
            <Text>Download PDF da net</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={styles.buttonStyle}
            onPress={printPDF}>
            <Text>Click to Print PDF</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={styles.buttonStyle}
            onPress={printRemotePDF}>
            <Text>Click to Print Remote PDF</Text>
          </TouchableOpacity>
        </View>
        </>
        }
      </SafeAreaView>
    );
  };

  export default App;

  const styles = StyleSheet.create({
    container: {
      flex: 1,
      padding: 10,
      backgroundColor: '#fff',
      alignItems: 'center',
    },
    titleText: {
      fontSize: 22,
      fontWeight: 'bold',
      textAlign: 'center',
      paddingVertical: 20,
    },
    buttonStyle: {
      alignItems: 'center',
      backgroundColor: '#DDDDDD',
      padding: 10,
      width: 300,
      marginVertical: 10,
    },
    containerPDF: {
      flex: 1,
      justifyContent: 'flex-start',
      alignItems: 'center',
      marginTop: 25,
  },
  pdf: {
      flex:1,
      width:Dimensions.get('window').width,
      height:Dimensions.get('window').height,
  }
  });